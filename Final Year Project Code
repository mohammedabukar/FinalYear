#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>

Adafruit_MPU6050 mpu;

#define TRIG_PIN 9
#define ECHO_PIN 8
#define BUZZER_PIN 6
#define MOTOR_PIN 5

const float swingThreshold = 0.5;   // rad/s threshold for swing detection
const int hazardThreshold = 50;    // cm
const float alpha = 0.98;          // Complementary filter coefficient

float angle = 0.0;                 // Estimated roll angle
unsigned long prevTime = 0;

void setup() {
  Serial.begin(9600);

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(MOTOR_PIN, OUTPUT);

  digitalWrite(BUZZER_PIN, LOW);
  digitalWrite(MOTOR_PIN, LOW);

  // Initialise MPU6050
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) delay(10);
  }

  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);

  delay(100);
  prevTime = millis();
}

float getDistanceCM() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duration = pulseIn(ECHO_PIN, HIGH, 30000);
  if (duration == 0) return -1;

  float distance = duration * 0.034 / 2;
  return distance;
}

void loop() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  // Complementary filter: estimate roll angle
  float accAngle = atan2(a.acceleration.y, a.acceleration.z) * 180 / PI;

  unsigned long currTime = millis();
  float dt = (currTime - prevTime) / 1000.0;
  prevTime = currTime;

  angle = alpha * (angle + g.gyro.x * dt * (180 / PI)) + (1 - alpha) * accAngle;

  // Check for swing phase using angular velocity
  if (abs(g.gyro.x) > swingThreshold) {
    float distance = getDistanceCM();
    Serial.print("Swing detected | Distance: ");
    Serial.print(distance);
    Serial.print(" cm | Roll: ");
    Serial.println(angle);

    if (distance > 0 && distance < hazardThreshold) {
      digitalWrite(BUZZER_PIN, LOW);
      digitalWrite(MOTOR_PIN, HIGH);
    } else {
      digitalWrite(BUZZER_PIN, HIGH);
      digitalWrite(MOTOR_PIN, LOW);
    }
  } else {
    // Stance phase: turn off output
    digitalWrite(BUZZER_PIN, HIGH);
    digitalWrite(MOTOR_PIN, LOW);
    Serial.println("Stance phase - sensor idle");
  }

  delay(20);  // Fast loop for responsiveness
}

